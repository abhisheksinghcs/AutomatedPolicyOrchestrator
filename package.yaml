AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'policy-change-alert

  An IT automation AWS Step Functions workflow.

  '
Parameters:
  EmailAddress:
    Type: String
    Default: ' '
    Description: (Required) The email address to notify on policy issues.
  restrictedActions:
    Type: String
    Default: s3:DeleteBucket,s3:DeleteObject
    Description: Restricted policy actions
Resources:
  RecieveUserAPI:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://buildersfntwo/78b70a8d7593a3c0331db62ec1afdc00
      Handler: app.handler
      Runtime: nodejs10.x
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - states:SendTaskSuccess
          Resource: '*'
      Events:
        allow:
          Type: Api
          Properties:
            Path: /allow
            Method: get
        deny:
          Type: Api
          Properties:
            Path: /deny
            Method: get
  ValidatePolicy:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://buildersfntwo/863326840d5c104124f4eb1e90bc7f94
      Handler: app.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          restrictedActions:
            Ref: restrictedActions
  PolicyChangerApprove:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://buildersfntwo/9a1ec08f2eba17d6e3b67a571ba1308c
      Handler: app.handler
      Runtime: nodejs10.x
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iam:CreatePolicyVersion
          Resource: '*'
      Environment:
        Variables:
          restrictedActions:
            Ref: restrictedActions
  RevertPolicy:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://buildersfntwo/dc090182dab8913d2f7c340e12426fed
      Handler: app.handler
      Runtime: nodejs10.x
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iam:CreatePolicyVersion
          - iam:DeletePolicyVersion
          Resource: '*'
      Environment:
        Variables:
          restrictedActions:
            Ref: restrictedActions
  AskUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://buildersfntwo/c9dc9bf23a52cc3f01ebf3f79a0da0c7
      Handler: app.handler
      Runtime: nodejs10.x
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sns:Publish
          Resource: '*'
      Environment:
        Variables:
          restrictedActions:
            Ref: restrictedActions
          Topic:
            Ref: AlertTopic
          APIAllowEndpoint:
            Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/allow
          APIDenyEndpoint:
            Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/deny
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub: "{\n  \"Comment\": \"Defect detection state machine\",\n  \"StartAt\"\
          : \"example\",\n  \"States\": {\n    \"example\": {\n      \"Type\": \"\
          Pass\",\n      \"ResultPath\": \"$\",\n      \"End\": true\n    }\n  }\n\
          }"
      RoleArn:
        Fn::GetAtt:
        - StatesExecutionRole
        - Arn
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: StateMachineTasks
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - ValidatePolicy
              - Arn
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - AskUser
              - Arn
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - RecieveUserAPI
              - Arn
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            - iam:CreatePolicyVersion
            Resource:
              Fn::GetAtt:
              - PolicyChangerApprove
              - Arn
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            - iam:CreatePolicyVersion
            - iam:DeletePolicyVersion
            Resource:
              Fn::GetAtt:
              - RevertPolicy
              - Arn
          - Effect: Allow
            Action:
            - sns:Publish
            Resource:
              Ref: AlertTopic
  CloudwatchEventsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: StartStepFunctions
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource:
              Ref: StateMachine
  IAMEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: NewPolicyCreated
      EventPattern:
        source:
        - aws.iam
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - iam.amazonaws.com
          eventName:
          - CreatePolicy
      State: ENABLED
      Targets:
      - Arn:
          Ref: StateMachine
        Id: StateMachineTarget
        RoleArn:
          Fn::GetAtt:
          - CloudwatchEventsExecutionRole
          - Arn
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: alertTopic
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Ref: EmailAddress
      Protocol: Email-JSON
      TopicArn:
        Ref: AlertTopic
Outputs:
  PolicyOrchestratorAPIAllow:
    Description: API Gateway endpoint URL for dev allow function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/allow
  PolicyOrchestratorAPIDeny:
    Description: API Gateway endpoint URL for dev allow function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/deny
