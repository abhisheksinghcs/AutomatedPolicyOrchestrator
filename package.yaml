AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'policy-change-alert

  An IT automation AWS Step Functions workflow.

  '
Parameters:
  EmailAddress:
    Type: String
    Default: benbo4@hotmail.com
    Description: (Required) The email address to notify on policy issues.
  restrictedActions:
    Type: String
    Default: '[''s3:DeleteBucket'',''s3:DeleteObject'']'
    Description: Restricted policy actions
Resources:
  RecieveUserAPI:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://policybuildersession/287138580d050d8488c11c4d48247799
      Handler: index.handler
      Runtime: nodejs8.10
      Events:
        allow:
          Type: Api
          Properties:
            Path: /allow
            Method: get
        deny:
          Type: Api
          Properties:
            Path: /deny
            Method: get
  ValidatePolicy:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://policybuildersession/b5a2ff3c5679511ddf0a1ba047729af1
      Handler: app.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          restrictedActions:
            Ref: restrictedActions
  RevertPolicy:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://policybuildersession/01848986d7b42bc5d4f47f358a3bce8b
      Handler: app.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          restrictedActions:
            Ref: restrictedActions
  AskUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://policybuildersession/1270ffe8c16c275da0e46de272dfaab2
      Handler: app.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          restrictedActions:
            Ref: restrictedActions
          Topic:
            Ref: AlertTopic
          APIAllowEndpoint:
            Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/allow
          APIDenyEndpoint:
            Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/deny
  PolicyChangerApprove:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://policybuildersession/94c04e661b032656e00725cf264c33f6
      Handler: app.handler
      Runtime: nodejs10.x
      Environment:
        Variables:
          restrictedActions:
            Ref: restrictedActions
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub: "{\n  \"Comment\": \"Defect detection state machine\",\n  \"StartAt\"\
          : \"ModifyState\",\n  \"States\": {\n    \"ModifyState\": {\n      \"Type\"\
          : \"Pass\",\n      \"Parameters\": {\n        \"policy.$\": \"$.detail.requestParameters.policyDocument\"\
          ,\n        \"accountId.$\": \"$.detail.userIdentity.accountId\",\n     \
          \   \"region.$\": \"$.region\",\n        \"policyMeta.$\":\"$.detail.responseElements.policy\"\
          \n      },\n      \"ResultPath\": \"$\",\n      \"Next\": \"ValidatePolicy\"\
          \n    },\n    \"ValidatePolicy\": {\n      \"Type\": \"Task\",\n      \"\
          ResultPath\":\"$.taskresult\",\n      \"Resource\": \"arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ValidatePolicy}\"\
          ,\n      \"Next\": \"ChooseAction\"\n    },\n    \"TempRemove\": {\n   \
          \   \"Type\": \"Task\",\n      \"ResultPath\":\"$.taskresult\",\n      \"\
          Resource\": \"arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${RevertPolicy}\"\
          ,\n      \"Next\": \"AskUser\"\n    },\n    \"ChooseAction\": {\n      \"\
          Type\" : \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\"\
          : \"$.taskresult.action\",\n          \"StringEquals\": \"remedy\",\n  \
          \        \"Next\": \"TempRemove\"\n        },\n        {\n          \"Variable\"\
          : \"$.taskresult.action\",\n          \"StringEquals\": \"alert\",\n   \
          \       \"Next\": \"AllowWithNotification\"\n        }\n      ],\n     \
          \ \"Default\": \"AllowWithNotification\"\n    },\n    \"AllowWithNotification\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:states:::sns:publish\"\
          ,\n      \"Parameters\": {\n        \"TopicArn\": \"${AlertTopic}\",\n \
          \       \"Subject\": \"Policy change detected!\",\n        \"Message.$\"\
          : \"$.taskresult.message\"\n      },\n      \"End\": true\n    },\n\n  \
          \  \"AskUser\":{\n        \"Type\": \"Task\",\n        \"Resource\":\"arn:aws:states:::lambda:invoke.waitForTaskToken\"\
          ,\n          \"Parameters\":{  \n              \"FunctionName\":\"askUser\"\
          ,\n              \"Payload\":{  \n                  \"token.$\":\"$$.Task.Token\"\
          \n                }\n          },\n        \"ResultPath\":\"$.taskresult\"\
          ,\n        \"Next\": \"usersChoice\"\n    },\n\n    \"usersChoice\": {\n\
          \      \"Type\" : \"Choice\",\n      \"Choices\": [\n        {\n       \
          \   \"Variable\": \"$.taskresult.action\",\n          \"StringEquals\":\
          \ \"delete\",\n          \"Next\": \"denied\"\n        },\n        {\n \
          \         \"Variable\": \"$.taskresult.action\",\n          \"StringEquals\"\
          : \"allow\",\n          \"Next\": \"approved\"\n        }\n      ],\n  \
          \    \"Default\": \"denied\"\n    },\n\n    \"denied\": {\n      \"Type\"\
          : \"Pass\",\n      \"End\":true\n    },\n\n    \"approved\": {\n      \"\
          Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:us-east-1:981723798357:function:policyChangerApprove\"\
          ,\n      \"TimeoutSeconds\": 3600,\n      \"End\": true\n\n    }\n  }\n}"
      RoleArn:
        Fn::GetAtt:
        - StatesExecutionRole
        - Arn
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action: sts:AssumeRole
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sts:AssumeRole
  StateFunctionExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Sub: StateFunctionExecutionPolicy
      Roles:
      - Ref: StatesExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - states:StartExecution
          Resource:
          - Ref: StateMachine
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource:
            Fn::GetAtt:
            - ValidatePolicy
            - Arn
        - Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource:
            Fn::GetAtt:
            - RevertPolicy
            - Arn
        - Effect: Allow
          Action:
          - sns:Publish
          Resource:
            Ref: AlertTopic
  IAMEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: EventRule
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - cloudtrail.amazonaws.com
          eventName:
          - CreatePolicy
      State: ENABLED
      Targets:
      - Arn:
          Ref: StateMachine
        Id: StateMachineTarget
        RoleArn:
          Fn::GetAtt:
          - StatesExecutionRole
          - Arn
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: alertTopic
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: benbo4@hotmail.com
      Protocol: email
      TopicArn:
        Ref: AlertTopic
Outputs:
  PolicyOrchestratorAPIAllow:
    Description: API Gateway endpoint URL for dev allow function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/allow
  PolicyOrchestratorAPIDeny:
    Description: API Gateway endpoint URL for dev allow function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/deny
